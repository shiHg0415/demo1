package ${packageName}.service.impl;

import cn.hutool.core.bean.BeanUtil;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
#if($table.crud || $table.sub)
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.core.domain.PageQuery;
#end
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${ClassName};
#if($useBO)
#set($bo="${ClassName}Bo")
import ${packageName}.domain.bo.${ClassName}Bo;
#else
#set($bo=$ClassName)
#end
#if($useQuery)
#set($query="${ClassName}Query")
import ${packageName}.domain.dto.${ClassName}Query;
#else
#set($query=$ClassName)
#end
#if($useVO)
#set($vo="${ClassName}Vo")
import ${packageName}.domain.vo.${ClassName}Vo;
#else
#set($vo=$ClassName)
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;

import java.util.List;
import java.util.Collection;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service {

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     * @return ${vo}
     */
    @Override
    public ${vo} queryById(${pkColumn.javaType} ${pkColumn.javaField}) {
#if($useVO)
        return baseMapper.selectVoById(${pkColumn.javaField});
#else
        return baseMapper.selectById(${pkColumn.javaField});
#end
    }

#if($table.crud || $table.sub)
    /**
     * 查询${functionName}列表
     *
     * @param query 查询对象
     * @return ${vo}
     */
    @Override
    public TableDataInfo<${vo}> queryPageList(${query} query) {
        return PageQuery.of(() -> baseMapper.queryList(query));
    }
#end

    /**
     * 查询${functionName}列表
     *
     * @param query 查询对象
     * @return ${vo}
     */
    @Override
    public List<${vo}> queryList(${query} query) {
        return baseMapper.queryList(query);
    }

    /**
     * 根据新增业务对象插入${functionName}
     *
     * @param bo ${functionName}新增业务对象
     * @return Boolean
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Boolean insertByBo(${bo} bo) {
#if($useBO)
        ${ClassName} add = BeanUtil.toBean(bo, ${ClassName}.class);
        return save(add);
#else
        return save(bo);
#end
    }

    /**
     * 根据编辑业务对象修改${functionName}
     *
     * @param bo ${functionName}编辑业务对象
     * @return Boolean
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Boolean updateByBo(${bo} bo) {
#if($useBO)
        ${ClassName} update = BeanUtil.toBean(bo, ${ClassName}.class);
        return updateById(update);
#else
        return updateById(bo);
#end
    }

    /**
     * 校验并批量删除${functionName}信息
     *
     * @param ids 主键集合
     * @return Boolean
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Boolean deleteWithValidByIds(Collection<${pkColumn.javaType}> ids) {
        return removeByIds(ids);
    }
}
